apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'com.kezong.fat-aar'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'

def modelName = "baselib_beta"
def debugNum = 1

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools
    defaultConfig {
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode 1
        versionName "0.0.48"
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility jdkVersion
        targetCompatibility jdkVersion
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    //google官方lib
    compileOnly rootProject.ext.multidex
    implementation rootProject.ext.supprotLibs
    implementation rootProject.ext.netLibs
    for (def library in rootProject.ext.fastLibs) {
        implementation (library) {
            exclude group: 'org.jetbrains.kotlin'
            exclude group: 'androidx.appcompat'
            exclude group: 'com.android.support'
            exclude group: 'glide'
        }
    }
//    implementation (rootProject.ext.fastLibs) { exclude group: 'org.jetbrains.kotlin' }
//    implementation (rootProject.ext.statusBarLibs) { exclude group : "androidx.appcompat" }

    implementation(rootProject.ext.imageLibs.glide) { exclude group: "com.android.support" }
    implementation rootProject.ext.imageLibs.glideOkhttp

    implementation (rootProject.ext.imageLibs.transform) { exclude group : "glide" }
//    kapt rootProject.ext.image.glideCompiler
}

//上传到Maven仓库的task
uploadArchives {
    repositories {
        mavenDeployer {
            Properties properties = new Properties()
            InputStream inputStream = project.rootProject.file(rootProject.ext.mavenConfig["pwd"]).newDataInputStream() ;
            properties.load( inputStream )

            //指定maven仓库url
            repository(url : rootProject.ext.mavenConfig['releasesRepoUrl']){
                authentication(userName: properties.getProperty("USERNAME"), password: properties.getProperty("PASSWORD"))
            }
            snapshotRepository(url : rootProject.ext.mavenConfig['snapshotsRepoUrl']) {
                authentication(userName: properties.getProperty("USERNAME"), password: properties.getProperty("PASSWORD"))
            }
            pom {
                groupId = rootProject.ext.mavenConfig['group']
                artifactId = modelName
                if ("debug".equals(android.defaultPublishConfig)) {
                    /**
                     * debug用于测试，会出现频繁更新的情况
                     * 于是根据实际情况，修改末尾数值
                     */
                    version = android.defaultConfig.versionName + "-" + android.defaultPublishConfig + "-" + debugNum
                    // 版本号
                }else {
                    /**
                     * 打release包，用于实际的版本使用
                     */
                    version = android.defaultConfig.versionName// + "-" + android.defaultPublishConfig
                    // 版本号
                }
            }
        }
    }
}



task androidSourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from android.sourceSets.main.java.source
    exclude "**/R.class"
    exclude "**/BuildConfig.class"
}

publishing {
    publications {
        release(MavenPublication) {
//                from components.release
//            from(components.getByName("release"))
            // group id，发布后引用的依赖的 group id
            groupId rootProject.ext.mavenConfig['group']
            // 发布后引用的依赖的 artifact id
            artifactId modelName
            // 发布的版本
            if ("debug".equals(android.defaultPublishConfig)) {
                /**
                 * debug用于测试，会出现频繁更新的情况
                 * 于是根据实际情况，修改末尾数值
                 */
                version = android.defaultConfig.versionName + "-" + android.defaultPublishConfig + "-" + debugNum
                // 版本号
            } else {
                /**
                 * 打release包，用于实际的版本使用
                 */
                version = android.defaultConfig.versionName + "-" + android.defaultPublishConfig
                // 版本号
            }
            // 发布的 arr 的文件和源码文件
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            artifact androidSourcesJar
            pom {
                name = modelName
                description = 'Android Base CommonLibary'
                url = 'https://github.com/tdxtxt/Base' // 构件主页
                licenses {// 许可证名称和地址
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {// 开发者信息
                    developer {
                        name = '唐德祥'
                        email = 'tdxtxt@qq.com'
                    }
                }

                scm { // 版本控制仓库地址
                    url = 'https://github.com/tdxtxt/Base'
                    connection = 'scm:git:github.com/tdxtxt/Base.git'
                    developerConnection = 'scm:git:ssh://git@github.com/tdxtxt/Base.git'
                }
            }
            // pom文件中声明依赖，从而传递到使用方
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.each {
                    // 避免出现空节点或 artifactId=unspecified 的节点
                    if (it.group != null && (it.name != null && "unspecified" != it.name) && it.version != null) {
                        println it.toString()
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        dependencyNode.appendNode('scope', 'implementation')
                    }
                }
            }
        }
    }
    repositories {
        maven {
            Properties properties = new Properties()
            InputStream inputStream = project.rootProject.file(rootProject.ext.mavenConfig["pwd"]).newDataInputStream();
            properties.load(inputStream)

            // 发布的位置，这里根据发布的版本区分了 SNAPSHOT 和最终版本两种情况
            url = version.endsWith('SNAPSHOT') ? rootProject.ext.mavenConfig['snapshotsRepoUrl'] : rootProject.ext.mavenConfig['releasesRepoUrl']
            credentials {
                username properties.getProperty("USERNAME")
                password properties.getProperty("PASSWORD")
            }
        }
    }
}

signing {
    sign publishing.publications
}